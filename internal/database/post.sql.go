// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: post.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, created_at, updated_at, title, url, description, published_at, feed_id)
VALUES (
$1,
$2,
$2,
$3,
$4,
$5,
$6,
$7
)
RETURNING id, created_at, updated_at, title, url, description, published_at, feed_id
`

type CreatePostParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	Title       sql.NullString
	Url         sql.NullString
	Description sql.NullString
	PublishedAt sql.NullTime
	FeedID      uuid.NullUUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
	)
	return i, err
}

const getPostsForUser = `-- name: GetPostsForUser :many
select p.id, p.created_at, p.updated_at, p.title, p.url, p.description, p.published_at, p.feed_id, f."name" as feed_name, f.url as feed_url, f.last_fetched_at as feed_last_update
from posts p 
left join feed_follows ff on ff.feed_id  = p.feed_id
left join feeds f on f.id = p.feed_id
where ff.user_id = $1
group by f."name", f.url, f.last_fetched_at, p.id
order by p.updated_at desc
limit $2
`

type GetPostsForUserParams struct {
	UserID uuid.NullUUID
	Limit  int32
}

type GetPostsForUserRow struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Title          sql.NullString
	Url            sql.NullString
	Description    sql.NullString
	PublishedAt    sql.NullTime
	FeedID         uuid.NullUUID
	FeedName       sql.NullString
	FeedUrl        sql.NullString
	FeedLastUpdate sql.NullTime
}

func (q *Queries) GetPostsForUser(ctx context.Context, arg GetPostsForUserParams) ([]GetPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForUserRow
	for rows.Next() {
		var i GetPostsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.FeedName,
			&i.FeedUrl,
			&i.FeedLastUpdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
